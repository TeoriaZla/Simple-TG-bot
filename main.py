import sqlite3
import os
import datetime
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "*" * –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ unique bot token from botfather
ADMIN_USER_ID = #  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π user_id
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "data", "survey_data.db")
os.makedirs(os.path.join(BASE_DIR, "data"), exist_ok=True)

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS responses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    username TEXT,
    experience TEXT,
    education TEXT,
    motivation TEXT,
    start_time TEXT,
    end_time TEXT,
    analysis TEXT
)
''')
conn.commit()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_WAITING_FOR_EXPERIENCE = "waiting_for_experience"
STATE_WAITING_FOR_EDUCATION = "waiting_for_education"
STATE_WAITING_FOR_MOTIVATION = "waiting_for_motivation"

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_start_time = {}
user_answers = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
def analyze_experience(experience):
    analysis = []
    if experience is None:
        analysis.append("üî∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
    elif any(keyword in experience.lower() for keyword in ['–Ω–µ—Ç –æ–ø—ã—Ç–∞', '–±–µ–∑ –æ–ø—ã—Ç–∞', '–Ω–æ–≤–∏—á–æ–∫']):
        analysis.append("üî∞ –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∏–º –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ. –ì–ª–∞–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!")
    elif any(keyword in experience.lower() for keyword in ['2-5 –ª–µ—Ç', '—Å—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç', '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–¥—ã']):
        analysis.append("üíº –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ.")
    elif any(keyword in experience.lower() for keyword in ['5+ –ª–µ—Ç', '–æ–ø—ã—Ç–Ω—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç']):
        analysis.append("üöÄ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º, –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        analysis.append("ü§î –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–≤—Å–µ–º —è—Å–µ–Ω, –Ω–æ –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–Ω—è—Ç—å –≤–∞—Å –ª—É—á—à–µ!")
    return analysis

def analyze_education(education):
    analysis = []
    if education is None:
        analysis.append("üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
    elif any(keyword in education.lower() for keyword in ['—Å—Ä–µ–¥–Ω–µ–µ', '–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ', '–±–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è']):
        analysis.append("üéì –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–æ –≤–∞–∂–Ω–æ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é!")
    elif any(keyword in education.lower() for keyword in ['–≤—ã—Å—à–µ–µ', '–±–∞–∫–∞–ª–∞–≤—Ä', '–º–∞–≥–∏—Å—Ç—Ä']):
        analysis.append("üéì –í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–µ—Ç –≤–∞–º –æ—Ç–ª–∏—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.")
    else:
        analysis.append("üßê –ú—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–±—É—á–∞–µ–º—Å—è –≤—Å–µ–≥–¥–∞.")
    return analysis

def analyze_motivation(motivation):
    analysis = []
    if motivation is None:
        analysis.append("üí≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
    elif any(keyword in motivation.lower() for keyword in ['–∫–∞—Ä—å–µ—Ä–∞', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Ä–æ—Å—Ç']):
        analysis.append("üå± –í—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏, —á—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!")
    elif any(keyword in motivation.lower() for keyword in ['–¥–µ–Ω—å–≥–∏', '–∑–∞—Ä–ø–ª–∞—Ç–∞']):
        analysis.append("üí∏ –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Å–æ—á–µ—Ç–∞–ª–∞—Å—å —Å –∫–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏.")
    elif any(keyword in motivation.lower() for keyword in ['–∫–æ–º–∞–Ω–¥–∞', '–æ–±—â–µ–Ω–∏–µ']):
        analysis.append("üë• –í—ã —Ü–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∏ —ç—Ç–æ –≤–∞–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.")
    else:
        analysis.append("ü§î –ú—ã –Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω—ã –≤ –≤–∞—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º!")
    return analysis

def analyze_candidate(experience, education, motivation):
    experience_analysis = analyze_experience(experience)
    education_analysis = analyze_education(education)
    motivation_analysis = analyze_motivation(motivation)

    full_analysis = (
        "üß† **–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:**\n\n"
        f"**–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:**\n" + "\n".join(experience_analysis) + "\n\n"
        f"**–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:**\n" + "\n".join(education_analysis) + "\n\n"
        f"**–ú–æ—Ç–∏–≤–∞—Ü–∏—è:**\n" + "\n".join(motivation_analysis)
    )
    return full_analysis

def main_menu_keyboard(is_admin):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    markup.add(KeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"))
    if is_admin:
        markup.add(KeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã"))
        markup.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç"))
    return markup

@bot.message_handler(commands=["start"])
def handle_start(message):
    username = message.from_user.username or "Unknown"
    is_admin = (message.from_user.id == ADMIN_USER_ID)
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        reply_markup=main_menu_keyboard(is_admin)
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    is_admin = (user_id == ADMIN_USER_ID)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    if message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        bot.send_message(
            message.chat.id,
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É. "
            "–ù–∞–∂–º–∏—Ç–µ 'üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å."
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"
    if message.text == "üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å":
        user_states[user_id] = STATE_WAITING_FOR_EXPERIENCE
        user_start_time[user_id] = datetime.datetime.now()
        user_answers[user_id] = {'experience': None, 'education': None, 'motivation': None}
        bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å 1: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç, 2-5 –ª–µ—Ç, 5+ –ª–µ—Ç)?")
        return

    state = user_states.get(user_id)

    if state == STATE_WAITING_FOR_EXPERIENCE:
        user_answers[user_id]['experience'] = message.text
        cursor.execute(
            "INSERT INTO responses (user_id, username, experience, start_time) VALUES (?, ?, ?, ?)",
            (user_id, message.from_user.username, message.text, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        user_states[user_id] = STATE_WAITING_FOR_EDUCATION
        bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–µ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–µ–¥–Ω–µ–µ, –≤—ã—Å—à–µ–µ)?")
    elif state == STATE_WAITING_FOR_EDUCATION:
        user_answers[user_id]['education'] = message.text
        cursor.execute(
            "UPDATE responses SET education = ? WHERE user_id = ? AND education IS NULL",
            (message.text, user_id)
        )
        conn.commit()
        user_states[user_id] = STATE_WAITING_FOR_MOTIVATION
        bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å 3: –ö–∞–∫–∞—è –≤–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –∑–¥–µ—Å—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–Ω—å–≥–∏, –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç, –æ–±—É—á–µ–Ω–∏–µ)")

    elif state == STATE_WAITING_FOR_MOTIVATION:
        user_answers[user_id]['motivation'] = message.text
        end_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute(
            "UPDATE responses SET motivation = ?, end_time = ? WHERE user_id = ? AND motivation IS NULL",
            (message.text, end_time, user_id)
        )
        conn.commit()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        analysis = analyze_candidate(
            user_answers[user_id]['experience'],
            user_answers[user_id]['education'],
            user_answers[user_id]['motivation']
        )

        cursor.execute(
            "UPDATE responses SET analysis = ? WHERE user_id = ?",
            (analysis, user_id)
        )
        conn.commit()

        user_states.pop(user_id, None)
        bot.send_message(user_id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    # –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    if is_admin:
        if message.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã":
            cursor.execute("SELECT id, username, experience, education, motivation, start_time, end_time, analysis FROM responses")
            rows = cursor.fetchall()
            if rows:
                response = "üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                for row in rows:
                    response += (
                        f"ID: {row[0]}\n@{row[1]}\n–û–ø—ã—Ç: {row[2]}\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {row[3]}\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: {row[4]}\n"
                        f"–í—Ä–µ–º—è: {row[5]} - {row[6]}\n–ê–Ω–∞–ª–∏–∑: {row[7]}\n\n"
                    )
                bot.send_message(user_id, response)
            else:
                bot.send_message(user_id, "üí° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        if message.text == "üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç":
            cursor.execute("SELECT id, username FROM responses")
            rows = cursor.fetchall()
            if rows:
                response = "üìã –°–ø–∏—Å–æ–∫ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
                for row in rows:
                    response += f"ID: {row[0]} ‚Äî @{row[1]} ‚¨áÔ∏è\n"
                response += "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                bot.send_message(user_id, response)
            else:
                bot.send_message(user_id, "üí° –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            user_states[user_id] = "awaiting_record_id_for_deletion"
            return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if user_states.get(user_id) == "awaiting_record_id_for_deletion":
        if message.text.isdigit():
            record_id = int(message.text)
            cursor.execute("DELETE FROM responses WHERE id = ?", (record_id,))
            conn.commit()
            bot.send_message(ADMIN_USER_ID, f"–ó–∞–ø–∏—Å—å —Å ID {record_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. ‚úÖ")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        user_states[user_id] = None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot is running...")
    bot.polling(none_stop=True)
